1
00:00:02,000 --> 00:00:10,000
Templates are really not that scary and they are one of the things that make C++ such a high performing

2
00:00:10,000 --> 00:00:16,000
language for you write applications in. They check what's going on at compile time.

3
00:00:16,000 --> 00:00:24,000
When you try to put an inappropriate type into a collection or add it to a running total the compiler

4
00:00:24,000 --> 00:00:30,000
complains, not at runtime, so you can't execute the code that has the problem that's violating type safety.

5
00:00:30,000 --> 00:00:36,000
And at runtime there's no need to check; it wouldn't have compiled if it wasn't a type safe behavior.

6
00:00:36,000 --> 00:00:41,000
That's why your application can be so fast when you use templates, but the productivity is really pretty

7
00:00:41,000 --> 00:00:48,000
dramatic. As long as your types are compatible with the templates you're using it can really package up,

8
00:00:48,000 --> 00:00:54,000
well, just about everything you'll learn as an undergraduate, but in some cases you barely even notice that

9
00:00:54,000 --> 00:01:02,000
you're using the template. If you happen to have a type that doesn't work with a template as written because

10
00:01:02,000 --> 00:01:07,000
you're missing an operator, because you're missing a member function, because your template is special in

11
00:01:07,000 --> 00:01:14,000
some way, then you can provide an operator, if that's appropriate, or write a template specialization and

12
00:01:14,000 --> 00:01:20,000
handle the special cases of your code that the person who wrote the template didn't know was coming.

13
00:01:20,000 --> 00:01:26,000
Now, despite the fact I wrote templates in my demos, you know you are not going to start by writing

14
00:01:26,000 --> 00:01:35,000
templates. You're going to start by using them. I let you see them being written so that you understand

15
00:01:35,000 --> 00:01:40,000
they're very simple and they're not that magical. The power is really in the language feature, not in the

16
00:01:40,000 --> 00:01:46,000
fact that someone went and wrote a 1,000-line template. That said, the templates in the Standard Library are

17
00:01:46,000 --> 00:01:52,000
more complicated than the super simple ones that I showed you. They work with special edge cases.

18
00:01:52,000 --> 00:01:59,000
They check for errors. They understand that sometimes additions might overflow or other unusual

19
00:01:59,000 --> 00:02:05,000
circumstances might arise. Using a template saves you a ton of development time.

20
00:02:05,000 --> 00:02:09,000
Whether it's for collections, whether it's for algorithms, whether it's for simple mathematical

21
00:02:09,000 --> 00:02:14,000
transformations, you shouldn't be writing that code. You're hardly the first person who ever came across the

22
00:02:14,000 --> 00:02:19,000
idea of, wow, we could have a hash table. Obviously, any code you don't have to write, but that you can

23
00:02:19,000 --> 00:02:26,000
count on working is a big benefit, so with templates you get that library power without taking a performance

24
00:02:26,000 --> 00:02:34,000
hit. They are probably the best thing about C++ when you compare it to other languages and now you know how

25
00:02:34,000 --> 00:59:00,000
they work.

