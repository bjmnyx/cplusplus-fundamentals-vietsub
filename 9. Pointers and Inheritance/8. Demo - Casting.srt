1
00:00:04,000 --> 00:00:12,000
Let's do some casting back and forth between base and derived and see where that gets us to. (Typing)

2
00:00:12,000 --> 00:00:17,000
Here's some code, again using Person and Tweeter, and I'll just show you that in

3
00:00:17,000 --> 00:00:22,000
Person the GetName function is virtual, so that

4
00:00:22,000 --> 00:00:29,000
here, when you see calls in main to GetName, you know that we're expecting to get the Tweeter version if the

5
00:00:29,000 --> 00:00:35,000
pointer really points to a Tweeter object, and the Person version when the pointer really points to the

6
00:00:35,000 --> 00:00:40,000
Person object, regardless of the type of the pointer. You can see what's happening here.

7
00:00:40,000 --> 00:00:44,000
I'm going to create a Tweeter on the stack, make a Person pointer by taking its address, and then I'm trying

8
00:00:44,000 --> 00:00:49,000
to take a Tweeter pointer by just using the Person pointer and I have wigglies here.

9
00:00:49,000 --> 00:00:56,000
A value of type Person* cannot be used to initialize an entity of type Tweeter*, and in fact, if I build this

10
00:00:56,000 --> 00:01:02,000
code, I'm going to get an actually pretty insightful error message, which says, cast from base to derived

11
00:01:02,000 --> 00:01:09,000
requires dynamic_cast or static_cast. I'm trying to go from the base Person to the derived Tweeter and we

12
00:01:09,000 --> 00:01:14,000
can see that's true because we know that Person's pointing to T, which is really a Tweeter, so we know this

13
00:01:14,000 --> 00:01:21,000
is safe, but the compiler is not so sure. Now, one way around this, I can use the round bracket cast.

14
00:01:21,000 --> 00:01:31,000
(Typing) Red wigglies go away, and this code will run,

15
00:01:31,000 --> 00:01:36,000
and I get the Tweeter version with the twitter handle, so I'm like, woo, I win.

16
00:01:36,000 --> 00:01:43,000
I used round bracket casting and I lived. It doesn't really explain our intent and it can really hurt you.

17
00:01:43,000 --> 00:01:52,000
Let me show you how this can really hurt you. I'm going to declare an integer (Typing) and then (Typing)

18
00:01:52,000 --> 00:01:59,000
I'm going to declare a Tweeter pointer, pointer to i is equal to (Typing) hey, cast this to a Tweeter pointer

19
00:01:59,000 --> 00:02:10,000
would you? The address of i. Compiler's like well, I guess you know what you're doing.

20
00:02:10,000 --> 00:02:14,000
You said round bracket cast, which means get off my case; I know what I want.

21
00:02:14,000 --> 00:02:22,000
So let's just copy this line, (Typing) only instead of pt we'll use pi,

22
00:02:22,000 --> 00:02:28,000
our freshly-minted Tweeter pointer that's pointing to a supposedly Tweeter.

23
00:02:28,000 --> 00:02:36,000
I guess you know this is not going to end well.

24
00:02:36,000 --> 00:02:42,000
Boom, and of course it goes boom. Right? I mean i is not a Tweeter. It doesn't

25
00:02:42,000 --> 00:02:46,000
have an implementation of GetName. It doesn't have a firstname, a lastname, a twitterhandle,

26
00:02:46,000 --> 00:02:53,000
anything. There's no way this could possibly work, but I said that I knew what I was doing.

27
00:02:53,000 --> 00:02:58,000
That's why we say sometimes that if C++ had a motto it would be, well you're the programmer or, when we're

28
00:02:58,000 --> 00:03:05,000
feeling really kind of darker humor, it's your foot. You're sure you want me to pull this trigger?

29
00:03:05,000 --> 00:03:11,000
Okay. It's not my foot; it's your foot. And as the programmer I don't want to shoot my foot off even though

30
00:03:11,000 --> 00:03:18,000
compiler will let me, so why use round brackets which don't check anything?

31
00:03:18,000 --> 00:03:28,000
Let's instead use a static_cast. So up here, the good one, I say, static_cast, angle brackets.

32
00:03:28,000 --> 00:03:36,000
I want to cast it to a Tweeter pointer, and then I put round brackets around the thing I want to cast.

33
00:03:36,000 --> 00:03:43,000
My angle bracket's the wrong direction. There we go. Static_cast to a Tweeter pointer p.

34
00:03:43,000 --> 00:03:50,000
Let's try it out down here. (Typing)

35
00:03:50,000 --> 00:03:55,000
Static_cast to a Tweeter pointer, address of i. (Typing)

36
00:03:55,000 --> 00:04:00,000
No red wigglies here. Red wigglies here. Invalid type conversion.

37
00:04:00,000 --> 00:04:05,000
Let's try to build.

38
00:04:05,000 --> 00:04:10,000
Types pointed to are unrelated. Yes, that's exactly the problem.

39
00:04:10,000 --> 00:04:13,000
So this was a really stupid piece of code to write, and you know what?

40
00:04:13,000 --> 00:04:18,000
Using static_cast saved me from myself and told me, wow that was stupid.

41
00:04:18,000 --> 00:04:23,000
Why did you want to do that? So static_cast will save me from myself.

42
00:04:23,000 --> 00:04:29,000
Sometimes what people would like to do is try a dynamic_cast instead.

43
00:04:29,000 --> 00:04:35,000
Now, the dynamic_cast won't object at compile time. What it'll do, is if it can't make the

44
00:04:35,000 --> 00:04:40,000
conversion, it will give you back a nullptr, which you can test.

45
00:04:40,000 --> 00:04:46,000
You notice I'm getting wiggles here. That's because you can't use a dynamic_cast with a fundamental type

46
00:04:46,000 --> 00:04:53,000
like int or even with certain kinds of classes. The class has to have a virtual function.

47
00:04:53,000 --> 00:04:56,000
I have good old Resource in here.

48
00:04:56,000 --> 00:05:02,000
This is a handy class to keep kicking around and it has a virtual function,

49
00:05:02,000 --> 00:05:07,000
so I can try to cast a Resource to a Tweeter, which would still be pretty catastrophic, so I'll

50
00:05:07,000 --> 00:05:16,000
create myself a local Resource, (Typing) passing (Typing)

51
00:05:16,000 --> 00:05:23,000
local into the constructor, and so, I'll still try to dynamically cast to a Tweeter,

52
00:05:23,000 --> 00:05:29,000
but I'll use the address of this Resource f instead of my integer.

53
00:05:29,000 --> 00:05:34,000
Let's try running. First I'll build it. Compiles without complaint.

54
00:05:34,000 --> 00:05:39,000
When I tried to do static_cast between totally unrelated types I got an error message.

55
00:05:39,000 --> 00:05:42,000
Try to do dynamic_cast, I'm like, ha ha, I got away with something, eh?

56
00:05:42,000 --> 00:05:47,000
So, let's run it.

57
00:05:47,000 --> 00:05:52,000
It turns out I didn't really get away with it and you know, this is why I say that the compiler is your

58
00:05:52,000 --> 00:05:58,000
friend. I would rather get my error messages as red wigglies right while I'm typing code or at least as

59
00:05:58,000 --> 00:06:03,000
compiler error messages when I try to build, than after I run, especially for a real app that takes a long

60
00:06:03,000 --> 00:06:08,000
time to run. These console apps just spin right out, but you have some big, complicated gooey; you have to

61
00:06:08,000 --> 00:06:12,000
click six buttons to do a test case; choose things from dropdowns, wait while database connections go

62
00:06:12,000 --> 00:06:17,000
through, da da da, and then it goes boom? I would much rather get my problem

63
00:06:17,000 --> 00:06:26,000
pointed out to me, handed to me, by the compiler. That said, I can prevent it from blowing up at all because

64
00:06:26,000 --> 00:06:37,000
I told you when a dynamic_cast fails you get back a nullptr. So I can take the bad behavior and say, if

65
00:06:37,000 --> 00:06:45,000
pi, in other words, if it's a true value, then I will try to call its GetName.

66
00:06:45,000 --> 00:06:50,000
Its i successfully converted it to a Tweeter. Great, I'll call a Tweeter code on it.

67
00:06:50,000 --> 00:07:02,000
Else, (Typing)

68
00:07:02,000 --> 00:07:05,000
I'll say something else like,

69
00:07:05,000 --> 00:07:14,000
resource can't be cast to Tweeter. (Typing)

70
00:07:14,000 --> 00:07:19,000
Let's run that. (Typing)

71
00:07:19,000 --> 00:07:22,000
Not surprisingly, it says resource can't be cast to tweeter,

72
00:07:22,000 --> 00:07:31,000
but let's recap. When we used round bracket casting I could cast integers to Tweeters and make my app blow

73
00:07:31,000 --> 00:07:40,000
up. When I used static casting it was just as sweet and useful for the good, proper, appropriate casting.

74
00:07:40,000 --> 00:07:45,000
We all know here that p really is pointing to a Tweeter, so this is an appropriate cast.

75
00:07:45,000 --> 00:07:52,000
Everything went swimmingly well. The static_cast refused to let me cast between integers and Tweeters

76
00:07:52,000 --> 00:07:58,000
or between Resources and Tweeters. Dynamic_cast didn't give me a compile error

77
00:07:58,000 --> 00:08:02,000
and gave me a way to check at runtime to make sure that this was okay to do.

78
00:08:02,000 --> 00:08:11,000
If someone's going to hand you a pointer, or a reference, and you're not sure whether or not it's maybe

79
00:08:11,000 --> 00:08:17,000
one of the derived types, you can try casting it using the dynamic_cast, and if it works, great.

80
00:08:17,000 --> 00:08:20,000
It really is the derived class, so you can go ahead and call methods on it.

81
00:08:20,000 --> 00:08:28,000
Doesn't work? No harm done, just don't do the work. That's how static_cast and dynamic_cast can save you

82
00:08:28,000 --> 00:59:00,000
from yourself, and they're what you should be using instead of round bracket cast.

