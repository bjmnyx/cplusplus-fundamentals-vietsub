1
00:00:02,000 --> 00:00:11,000
I want to go back to casting again. A long, long time ago I showed you how to cast with the round brackets.

2
00:00:11,000 --> 00:00:16,000
You have a floating point number and you write round bracket int, round bracket, and then the floating point

3
00:00:16,000 --> 00:00:21,000
number, and then that casts it to an integer, maybe throws away the part of the number that was after the

4
00:00:21,000 --> 00:00:28,000
decimal point. You don't get a warning because hey, you told the compiler you knew what you were doing.

5
00:00:28,000 --> 00:00:33,000
You can use round casts to go back and forth between different kinds of pointers, different kinds of

6
00:00:33,000 --> 00:00:38,000
references, but it's kind of a dangerous thing to do. There's nothing to check to see that it's okay what

7
00:00:38,000 --> 00:00:43,000
you're doing, and when someone else reads over your code they may not understand what you're doing or why

8
00:00:43,000 --> 00:00:48,000
you're doing it, and very often people end up putting comments like, this is okay because I know it actually

9
00:00:48,000 --> 00:00:55,000
has a Tweeter in it. There are better casts available to you, and now that you understand template syntax,

10
00:00:55,000 --> 00:01:04,000
you can use them. Here is the static_cast. It's a template. It's an operator called static_cast, angle

11
00:01:04,000 --> 00:01:10,000
bracket, whatever you want to cast to, and it's done at compile time.

12
00:01:10,000 --> 00:01:15,000
If, at compile time, the compiler doesn't see a relationship between what something's really pointing to and

13
00:01:15,000 --> 00:01:20,000
what you're trying to cast it to, or in the case of numbers, the kind of number it really holds, and the kind

14
00:01:20,000 --> 00:01:26,000
of number you're trying to cast it to, you will get a warning, or in some cases, an error that they're

15
00:01:26,000 --> 00:01:34,000
incompatible. But if it could sometimes hold this kind of information, and could sometimes hold that kind of

16
00:01:34,000 --> 00:01:41,000
information, you can be tripped up by a static_cast because there are no runtime checks to help you out.

17
00:01:41,000 --> 00:01:49,000
The dynamic_cast has a runtime check and the runtime check relies on knowing what the type is at runtime.

18
00:01:49,000 --> 00:01:55,000
It's restricted to working with pointers to objects of classes that have virtual tables.

19
00:01:55,000 --> 00:02:01,000
The cool thing about a dynamic_cast is that when you're trying to cast to a pointer, if it doesn't work,

20
00:02:01,000 --> 00:02:07,000
because at runtime it can be established that, that's not really pointing to a Tweeter, you get back a

21
00:02:07,000 --> 00:02:12,000
nullptr and you can test against a nullptr. If you're trying to cast to a reference it'll throw an

22
00:02:12,000 --> 00:02:19,000
exception. That's okay too. They're slower, to use the dynamic_cast, but it's safer.

23
00:02:19,000 --> 00:02:28,000
You won't ever misinterpret bits and cause really weird bugs of the kind that you can get when you misuse a

24
00:02:28,000 --> 00:02:33,000
static_cast. Now, for the sake of completeness, I'll also mention const_cast.

25
00:02:33,000 --> 00:02:38,000
I'm not showing you the exact syntax here. This is where you can actually take a const variable and cast it

26
00:02:38,000 --> 00:02:44,000
to a not-const variable so you can change it. As you can imagine, not a beginner technique.

27
00:02:44,000 --> 00:02:50,000
Sometimes people will do this to handle caches and things like that, where you're not really changing the

28
00:02:50,000 --> 00:02:55,000
object. There are other ways to do it. Anyway, not for beginners.

29
00:02:55,000 --> 00:02:59,000
Reinterpret_cast is totally not for beginners. This is a matter of bit-twiddling.

30
00:02:59,000 --> 00:03:06,000
This involves knowing how long certain data types are and the pattern of bits inside the data type, and you

31
00:03:06,000 --> 00:03:10,000
say, oh yeah, I think of that as being an integer, and then you put some values in, and then you say, now

32
00:03:10,000 --> 00:03:14,000
I'm going to think of it as being something completely different and ask about its value, and the bits will

33
00:03:14,000 --> 00:03:19,000
be interpreted differently; the meaning will be interpreted differently.

34
00:03:19,000 --> 00:03:24,000
There is old code that uses reinterpret_cast, but what I really use it as is a huge red flag to say, wait a

35
00:03:24,000 --> 00:03:29,000
minute, someone's trying to be really smart here. Is that actually necessary?

36
00:03:29,000 --> 00:03:35,000
That's one of the ways that casts can really express your intent. A static_cast is nice and safe between

37
00:03:35,000 --> 00:03:39,000
two related types and you're really confident that this Person pointer actually points to a Tweeter, so you

38
00:03:39,000 --> 00:03:43,000
just feel like casting it to a Tweeter so you can call some Tweeter function.

39
00:03:43,000 --> 00:03:49,000
Yeah. Dynamic_cast, a little less safe, a little bit of a runtime performance hit, but you will be checked

40
00:03:49,000 --> 00:03:55,000
on, and you will be protected. Const_cast, very dangerous, and reinterpret_cast, extraordinarily dangerous.

41
00:03:55,000 --> 00:03:59,000
This is the shooting your own foot off territory of C++ and that's why I'm not going to teach you how to do

42
00:03:59,000 --> 00:59:00,000
it. I want you to know that it's there. If you see these casts in someone else's code, tread carefully.

