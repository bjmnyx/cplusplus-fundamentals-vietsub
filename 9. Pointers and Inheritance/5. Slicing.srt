1
00:00:03,000 --> 00:00:09,000
I mentioned that a lot of this passing a CheckingAccount to something that's expecting a BankAccount has to

2
00:00:09,000 --> 00:00:16,000
be with pointers. The reason is because when you copy solid objects around you get something known as

3
00:00:16,000 --> 00:00:23,000
slicing. If I take a CheckingAccount that has a balance, and who owns it, and all that contact information,

4
00:00:23,000 --> 00:00:30,000
as well as an overdraft limit, and I copy it into a BankAccount object that doesn't have a place to keep

5
00:00:30,000 --> 00:00:35,000
overdraft limit, the absolutely best thing that can happen is that the overdraft limit will just get thrown

6
00:00:35,000 --> 00:00:40,000
away because there's no place to put it. The worst thing that'll happen is some kind of runtime error.

7
00:00:40,000 --> 00:00:46,000
So you can take a CheckingAccount pointer and give it to something expecting a BankAccount pointer.

8
00:00:46,000 --> 00:00:51,000
That's fine, but if you take an entire solid CheckingAccount and give it to something that's expecting a BankAccount,

9
00:00:51,000 --> 00:00:59,000
you're going to lose some of the CheckingAccount information. That's not necessarily an error, but it is if

10
00:00:59,000 --> 00:01:05,000
you then want to try to, somehow, get some virtual behavior where you'll see the use of the derived class's

11
00:01:05,000 --> 00:01:10,000
member variables. There is no derived class anymore and those member variables are gone.

12
00:01:10,000 --> 00:01:17,000
Similarly, you can't take a BankAccount and copy it into a CheckingAccount because there's information

13
00:01:17,000 --> 00:01:22,000
missing from that base class that's' needed in the derived class.

14
00:01:22,000 --> 00:01:28,000
We do simple demos where we declare things and set them equal to things, but as I've said many times before,

15
00:01:28,000 --> 00:01:33,000
what really happens in live C++ programs is that things are being copied back and forth to functions because

16
00:01:33,000 --> 00:01:40,000
functions are what your app is built of. If your function takes things by value, and the types are

17
00:01:40,000 --> 00:01:46,000
different, either the copying will entirely fail or slicing will happen, depending on which direction you're

18
00:01:46,000 --> 00:01:52,000
going in. Slicing's bad because you're throwing information away, and certainly copies failing is also bad,

19
00:01:52,000 --> 00:02:00,000
and that's why it's so common not to pass by value, but to pass by reference or to use pointers.

20
00:02:00,000 --> 00:02:05,000
References use the same syntax as solid objects, use the dot instead of the arrow.

21
00:02:05,000 --> 00:02:11,000
Some people find them a little easier to read. Polymorphically, there's no real difference between

22
00:02:11,000 --> 00:02:16,000
references and pointers. The same rules apply about, oh I'm expecting a BankAccount reference, sure, here,

23
00:02:16,000 --> 00:02:22,000
have a CheckingAccount reference, and that's why people use references and pointers when they're passing

24
00:02:22,000 --> 00:59:00,000
things around to functions.

