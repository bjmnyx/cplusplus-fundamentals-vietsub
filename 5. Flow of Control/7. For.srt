1
00:00:02,000 --> 00:00:10,000
In addition to while, C++ also has the for loop. For loops are made up of three parts.

2
00:00:10,000 --> 00:00:15,000
There's the initializer that starts the beginning of the loop.

3
00:00:15,000 --> 00:00:20,000
So if you want to do something 10 times you might initialize to 1, if you were going to go from 1 to 10 or to 0

4
00:00:20,000 --> 00:00:26,000
if you're going to go from 0 to 9. You can declare a database here in the initializer.

5
00:00:26,000 --> 00:00:33,000
If you do that, then the variable goes out of scope when the for loop is over or you can use a variable that's

6
00:00:33,000 --> 00:00:39,000
already in scope and it will continue to be in scope at the end of loop.

7
00:00:39,000 --> 00:00:45,000
Next, we have a condition using exactly the same kinds of expressions you can use for if and while.

8
00:00:45,000 --> 00:00:51,000
That means Boolean expressions but also things that evaluate to something other than a Boolean and then we have

9
00:00:51,000 --> 00:00:56,000
the loop expression, the thing that moves you onto the next item in the loop.

10
00:00:56,000 --> 00:01:02,000
So in our while, we have to remember by hand at the bottom of the loop to put i = i + 1 and you'll sometimes see while

11
00:01:02,000 --> 00:01:08,000
loops where the increment is in the middle, especially if it's something like reading a file.

12
00:01:08,000 --> 00:01:14,000
The for loop expression is always done as the very last thing, so the whole loop body gets executed and then the

13
00:01:14,000 --> 00:01:21,000
loop expression, and then we come around and test the condition again and if appropriate go and execute the loop again.

14
00:01:21,000 --> 00:01:29,000
So here's a sample for loop for int i=0, i &lt; 10; i = i + 1 and again, there's a better way to increment i, which

15
00:01:29,000 --> 00:01:38,000
we'll cover later. Now this loop runs from 0 to 9, 10 is not less than 10 and running from 0 to 9 is the very C++

16
00:01:38,000 --> 00:01:47,000
way to do something 10 times. Because i has been declared right here in the initializer, after the for loop i

17
00:01:47,000 --> 00:01:55,000
will be out of scope. That's great, it lets you sort of throw away these variables whenever you want.

18
00:01:55,000 --> 00:02:01,000
Sometimes people want to use the loop variable afterwards. In that case, you need to declare it on the line before

19
00:02:01,000 --> 00:59:00,000
int i and then 4 i = 0, i &lt; 10 and so on.

