1
00:00:02,000 --> 00:00:11,000
This module has introduced you to the idea of types that variables have a specific type like integer or bool and

2
00:00:11,000 --> 00:00:13,000
that you have to declare a variable before you use it.

3
00:00:13,000 --> 00:00:20,000
You can declare and use it all in one or you can declare it and then give it a value however many lines later you want

4
00:00:20,000 --> 00:00:28,000
and obviously once it's got a value, you can use it in other calculations, you saw as simply assigning the value

5
00:00:28,000 --> 00:00:37,000
of say i1 into that double. Different types for different kinds of data, they have different lengths, they have

6
00:00:37,000 --> 00:00:41,000
different maximum values in the case of numbers that they can hold.

7
00:00:41,000 --> 00:00:44,000
The compiler knows all this, and will help you as much as it can.

8
00:00:44,000 --> 00:00:50,000
There is also documentation on MSDN if you really start to get worked up about whether or not you can hold billion

9
00:00:50,000 --> 00:00:58,000
in your integer of what have you. You should at least have a faint inkling in the back of your mind that overflow

10
00:00:58,000 --> 00:01:03,000
can happen, that you don't get error messages at runtime when overflow does happen.

11
00:01:03,000 --> 00:01:10,000
The best way to avoid this is don't put numbers into the char type, put numbers into something like int and then

12
00:01:10,000 --> 00:01:13,000
you're almost certainly not going to have a problem with overflow.

13
00:01:13,000 --> 00:01:20,000
Occasionally, I'll see people who have database keys or other really, really big numbers and their putting them

14
00:01:20,000 --> 00:01:32,000
into say a short, something that can hold 32767 and when they crank over to 32768, 9, 70, the run into an overflow

15
00:01:32,000 --> 00:01:35,000
and are really confused and don't know what has happened.

16
00:01:35,000 --> 00:01:41,000
if remember that overflow exists you'll recognize this problem when you come across it.

17
00:01:41,000 --> 00:01:47,000
Just using ints most of the time unless you happen to be in an environment where every single byte counts is the

18
00:01:47,000 --> 00:01:53,000
simplest way to prevent overflow from being a problem for you.

19
00:01:53,000 --> 00:01:59,000
When you want to convert between two types and you're getting a compiler warning about it, stop because remember

20
00:01:59,000 --> 00:02:05,000
the compiler is your friend, and think about whether you actually want to throw away data or truncate a value

21
00:02:05,000 --> 00:02:10,000
whatever it's warning you you're going to do, and if you do then say so by casting.

22
00:02:10,000 --> 00:02:14,000
For now, with the round brackets as we showed in the demo.

23
00:02:14,000 --> 00:02:20,000
Later, after we've covered templates, I'll show you a better and safer way to cast, but for now, casting tells

24
00:02:20,000 --> 00:02:27,000
the compiler, don't warn me about that and that ensures that you'll continue to see warnings that you need to see

25
00:02:27,000 --> 00:02:33,000
from situations that you haven't thought through and weren't doing on purpose and that's when the compiler will

26
00:02:33,000 --> 00:59:00,000
help you out.

