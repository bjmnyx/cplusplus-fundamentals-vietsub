1
00:00:02,000 --> 00:00:09,000
You are going to write console applications because they are simple, but our very simple hello world

2
00:00:09,000 --> 00:00:14,000
application had quite a few lines of code and I would like to actually go through them now

3
00:00:14,000 --> 00:00:19,000
and explain them to you in turn.

4
00:00:19,000 --> 00:00:25,000
It started with a comment. Comments in C++, when they are on a line of their own like this one,

5
00:00:25,000 --> 00:00:33,000
start with the two slashes. And this comment was actually generated by the Visual Studio Wizard

6
00:00:33,000 --> 00:00:36,000
that made the project, and you'll see a little bit more about that shortly.

7
00:00:36,000 --> 00:00:41,000
Any line that starts slash, slash you can ignore it, it's a comment.

8
00:00:41,000 --> 00:00:47,000
Then we had these three, what are called pre-processor directives.

9
00:00:47,000 --> 00:00:52,000
C++ has something called a pre-processor, which goes through your code before the compiler

10
00:00:52,000 --> 00:00:58,000
and tweaks it a little bit. And one of things that it does, is it combines multiple files into one.

11
00:00:58,000 --> 00:01:05,000
If there is some functionality that you use routinely, you put just the definitions of that functionality

12
00:01:05,000 --> 00:01:13,000
in what's known as a header file. And include that header in each file that needs it.

13
00:01:13,000 --> 00:01:18,000
Often when people first meet this, they think it doesn't make any sense and doesn't have any value,

14
00:01:18,000 --> 00:01:23,000
because they're seeing very small applications where everything could fit in a single file.

15
00:01:23,000 --> 00:01:32,000
But it can be very useful for larger structured applications that have perhaps hundreds of functions that

16
00:01:32,000 --> 00:01:35,000
need to be used by some parts of the applications, but not others.

17
00:01:35,000 --> 00:01:42,000
And you can use header files to keep this all straight and to make it all make sense.

18
00:01:42,000 --> 00:01:46,000
The symbol at the beginning of these lines is pronounced differently by different people.

19
00:01:46,000 --> 00:01:52,000
You might hear hash, you might hear pound, you might hear number sign or just number.

20
00:01:52,000 --> 00:01:59,000
What I hear the most often is nothing at all. People will just read these lines as include standard afh.x,

21
00:01:59,000 --> 00:02:05,000
include iostream, include string, they don't even pronounce the symbol.

22
00:02:05,000 --> 00:02:11,000
You may notice that the first line has double quotes around the file name and the other two lines have angle brackets.

23
00:02:11,000 --> 00:02:15,000
As well, the first line has a .h and the other two lines do not.

24
00:02:15,000 --> 00:02:25,000
This is deliberate and it actually makes sense. The double quoted line is referring to a file that is part

25
00:02:25,000 --> 00:02:30,000
of the solution we are compiling and I will show you that in a little while in the demo.

26
00:02:30,000 --> 00:02:34,000
The angle bracket lines are referring to parts of the standard library.

27
00:02:34,000 --> 00:02:41,000
Functionality that comes with C++. As a cross platform language, and something that is controlled by a

28
00:02:41,000 --> 00:02:48,000
standards committee, there was an interesting dilemma to be solved when these headers were being named.

29
00:02:48,000 --> 00:02:53,000
It's very common in Windows to say .h for your header file.

30
00:02:53,000 --> 00:02:59,000
But, some people who have a C background and were using .h for C header files,

31
00:02:59,000 --> 00:03:07,000
liked to use HPP for C++ header files, just as we use CPP for the source file of a C++ program.

32
00:03:07,000 --> 00:03:14,000
Rather than settle the issue of whether they should be called something .h or something .hpp,

33
00:03:14,000 --> 00:03:20,000
the standards committee made the standard library includes not have any extension at all.

34
00:03:20,000 --> 00:03:28,000
So it is just iostream or just string. You may find some really old code if you have an old book that uses

35
00:03:28,000 --> 00:03:36,000
extensions on their standards library headers. Do not pay attention to that book, it is too old.

36
00:03:36,000 --> 00:03:41,000
It's been very much the case for a long time, that there is no extension on a header include.

37
00:03:41,000 --> 00:03:48,000
So these three lines include one header from elsewhere in our project, pronounced standard afx.h.

38
00:03:48,000 --> 00:03:55,000
You pretty much always pronounce STD as standard in C++ land and two headers from the library,

39
00:03:55,000 --> 00:04:02,000
one called iostream and one called string. And between them, these headers provide some of the definitions

40
00:04:02,000 --> 00:04:07,000
that the rest of the application is going to use.

41
00:04:07,000 --> 00:04:13,000
This line declares the main, the entry point, the thing that is run when you run the application.

42
00:04:13,000 --> 00:04:20,000
So when you run this application by choosing Control+F5, Windows does some loading, does some bits and pieces

43
00:04:20,000 --> 00:04:28,000
and then hands control to the start of this function. You may read again elsewhere that your program is

44
00:04:28,000 --> 00:04:33,000
always called main, this tmain actually gets translated by the pre-processor into main.

45
00:04:33,000 --> 00:04:38,000
It's kind of a long story. This is what the Wizard will generate for you and this is what is right

46
00:04:38,000 --> 00:04:41,000
when you are working in Visual Studio.

47
00:04:41,000 --> 00:04:49,000
Then we have a brace bracket. That says here tmain starts and everything that follows is in that tmain until

48
00:04:49,000 --> 00:04:57,000
we hit the close brace bracket that ends it. This is the line of code that caused "Type your name" to appear

49
00:04:57,000 --> 00:05:07,000
in that black DOS box or command prompt when the application ran. The way you read this is standard c out.

50
00:05:07,000 --> 00:05:12,000
The symbol in between them, which you get by typing a colon twice on your keyboard,

51
00:05:12,000 --> 00:05:15,000
is known as the scope resolution operator.

52
00:05:15,000 --> 00:05:20,000
The scope resolution operator shows up in a couple places, but one of the really important ones is between a

53
00:05:20,000 --> 00:05:26,000
name space name and something that's in the name space. And c out is in the standard name space.

54
00:05:26,000 --> 00:05:33,000
Specifically, c out stands for Consult Output, so I am using a standard capability that comes with the

55
00:05:33,000 --> 00:05:39,000
language to put output on the console. Not surprisingly, after a little bit of punctuation that I will

56
00:05:39,000 --> 00:05:46,000
explain later, you see "Type your name" and type your name is what we saw appear on console output.

57
00:05:46,000 --> 00:05:55,000
Then we have again the symbol that I'll explain later and standard endl, which everyone I know pronounces end line,

58
00:05:55,000 --> 00:06:00,000
because that it what it stands for. And that's what caused the cursor to move down to the next line

59
00:06:00,000 --> 00:06:06,000
for me to type my name on it. And then there's a semi-colon, because our lines end with a semi-colon.

60
00:06:06,000 --> 00:06:09,000
Pre-processor directives like the includes didn't end with a semi-colon,

61
00:06:09,000 --> 00:06:14,000
and the function definition didn't end with a semi-colon. Braces are all on their own.

62
00:06:14,000 --> 00:06:19,000
But this is our first kind of real line of the application, so it is ending with a semi-colon.

63
00:06:19,000 --> 00:06:26,000
This line declares a variable. As in a lot of languages, we say the type of the variable and then one or

64
00:06:26,000 --> 00:06:32,000
more spaces and then the name we want to give it, and then in this case we end the statement with a semi-colon.

65
00:06:32,000 --> 00:06:39,000
So the type of this variable is std::string, which is generally pronounced standard string

66
00:06:39,000 --> 00:06:43,000
or some people might say stood string.

67
00:06:43,000 --> 00:06:52,000
We're using the string class from that standard library and we are giving the name of this object, name.

68
00:06:52,000 --> 00:06:57,000
It's a little self-referential, but it asked the person for their name so, calling it name makes perfect sense.

69
00:06:57,000 --> 00:07:04,000
So name is a string. You don't know all of what a string can do. You don't need to know all of what a string can do.

70
00:07:04,000 --> 00:07:10,000
It can certainly hold strings, and that's what we are going to ask it to do.

71
00:07:10,000 --> 00:07:17,000
This line is using std::cin for Console Input, another thing in the standard name space

72
00:07:17,000 --> 00:07:23,000
that comes with the standard library. Now, I am still not discussing the punctuation,

73
00:07:23,000 --> 00:07:30,000
but I will just point out that these point in the opposite direction than they did back when we were using c out.

74
00:07:30,000 --> 00:07:35,000
And if this makes you think of something going from console input into name,

75
00:07:35,000 --> 00:07:37,000
that's exactly how you are supposed to think of it.

76
00:07:37,000 --> 00:07:41,000
So this line of code takes whatever it was that I typed on the keyboard,

77
00:07:41,000 --> 00:07:48,000
and puts it in the string that is being referred to as name.

78
00:07:48,000 --> 00:07:56,000
Now we are back to our friend console output and we are putting out Hello, space and then whatever is in

79
00:07:56,000 --> 00:08:04,000
the string name and then another standard end line. And that's why it came back and said Hello Kate to me when it ran.

80
00:08:04,000 --> 00:08:10,000
There's no code in this program to pause when we get to the end.

81
00:08:10,000 --> 00:08:14,000
As you saw when we ran the debugger, we didn't pause when we got to the end.

82
00:08:14,000 --> 00:08:18,000
The only reason it pauses when you get to the end when you run with Control+F5,

83
00:08:18,000 --> 00:08:24,000
is because Visual Studio provides that capability for you, so there is no code in the program to pause.

84
00:08:24,000 --> 00:08:30,000
The next line in the program is to return. Now when you return from main you are completely done.

85
00:08:30,000 --> 00:08:37,000
You're telling Windows that your application is terminated and it's time to close up the window

86
00:08:37,000 --> 00:08:42,000
if that's what the window was launched for.

87
00:08:42,000 --> 00:08:51,000
You may notice that tmain starts int _ tmain and int is the return type of that function.

88
00:08:51,000 --> 00:08:59,000
Just as string was the type of name. Some people wonder why a function like main would bother to return a

89
00:08:59,000 --> 00:09:06,000
value or what it could mean. Especially in the days of DOS, we actually did used to use the return values of

90
00:09:06,000 --> 00:09:10,000
applications to indicate whether they succeeded or not for example.

91
00:09:10,000 --> 00:09:16,000
It's unusual to see anybody deliberately put a value in the return type of a console application these days,

92
00:09:16,000 --> 00:09:24,000
but you can't leave it out. So we just type return 0, and they all return 0 and it all works fine.

93
00:09:24,000 --> 00:09:30,000
If you care, 0 actually means success, so you are saying that we succeeded, which I think is fair.

94
00:09:30,000 --> 00:09:35,000
Someone typed their name, we said hello to them, we accomplished our mission and we can return.

95
00:09:35,000 --> 00:09:40,000
So the last line of the application is the close brace to indicate the end of tmain.

96
00:09:40,000 --> 00:09:46,000
This really is just to keep the compiler happy. When the program is executing, we'll return,

97
00:09:46,000 --> 00:09:51,000
but if you left that close brace off, the compiler would say, I don't know where tmain ends,

98
00:09:51,000 --> 00:09:54,000
something has gone wrong here, so you have to include it.

99
00:09:54,000 --> 00:09:59,000
And that's the structure of our very simplest console application.

100
00:09:59,000 --> 00:10:05,000
You can see that we have comments, we're including header files, we are defining our main function, which is

101
00:10:05,000 --> 00:10:08,000
what Windows will launch for us when we run the application.

102
00:10:08,000 --> 00:10:14,000
We are putting something on standard output using the console output capability of the standard library.

103
00:10:14,000 --> 00:10:19,000
We are working with string from the standard library and we are getting information from console input,

104
00:10:19,000 --> 00:10:24,000
again using part of the standard library.

105
00:10:24,000 --> 00:10:28,000
If you wanted to take this application and put it on a completely different operating system, and use a

106
00:10:28,000 --> 00:10:36,000
completely different compiler, you would probably have to change the name from tmain to say just main,

107
00:10:36,000 --> 00:10:42,000
but it would run properly and work on those compilers and on those operating systems as well.

108
00:10:42,000 --> 00:10:46,000
That's the big appeal of C++.

109
00:10:46,000 --> 00:10:50,000
There is probably more punctuation on the screen than you are used to seeing,

110
00:10:50,000 --> 00:10:54,000
but when we walk through it a line at a time, it shouldn't be too intimidating,

111
00:10:54,000 --> 00:10:57,000
and it becomes second nature very quickly.

112
00:10:57,000 --> 00:11:01,000
Now that you've seen it a line at a time, it may also be a little bit more readable if we now go back over

113
00:11:01,000 --> 00:11:10,000
and take a look at the syntax coloring in Visual C++ Express. You can see that the comments are green.

114
00:11:10,000 --> 00:11:15,000
The include directives are blue and the particular file that they are including is red.

115
00:11:15,000 --> 00:11:23,000
You can see that this int and this return are also blue and these other types are black, they are sort of the

116
00:11:23,000 --> 00:11:30,000
meat and potatoes of your application. The strings are in red, it helps to make them stand out.

117
00:11:30,000 --> 00:11:39,000
This very simple application, contains the structure that every console application contains, and once you

118
00:11:39,000 --> 00:59:00,000
can read this and write this, you are reading and writing C++.

